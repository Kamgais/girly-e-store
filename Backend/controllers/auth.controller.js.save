const { Sequelize, UniqueConstraintError } = require('sequelize');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken')
const {ValidationError} = require('sequelize')
const UserService = require('../services/user-service');
const generateError = require('../utils/error');
const { findUserById } = require('../services/user-service');
const colors = require('colors')

// create a user account

const createAccount = () => {
    return async (req,res,next) => {
     try {
        
       const newUser = await UserService.createUser(req.body);
       const {password, ...others} = newUser.dataValues;
       res.status(201).json({message: 'User has been created...', data : others})
       console.log(colors.bold.bgGreen('/auth/register  POST USER'))

     } catch (error) {
        
        if(error instanceof UniqueConstraintError) {
            return res.status(400).json({message: error.parent.message})
        }
        if(error instanceof ValidationError) {
            return res.status(400).json( {message : error.message})
        }
       next(error);    
    }
    }
}



// login 
const loginAccount = () => {
    return async (req,res,next) => {
        const message = 'wrong credentials!!!'
        try {
         const user = await UserService.findUserByUsername(req.body.username);
         if(!user) return res.status(404).json({message})

         const validated = await bcrypt.compare(req.body.password, user.password);
         if(!validated) res.status(401).json({message})
         // create a token for the user
         const token = jwt.sign({
            id: user.id,isAdmin: user.isAdmin
         }, process.env.JWT,{
            expiresIn: '1hr'
         })
         // console.log(user)
         const {password,isAdmin,...others} = user.dataValues;
         res
        .cookie('access_token', token,{
            path: '/',
            expiresIn: '1hr',
            httpOnly: true,
            sameSite: 'lax'
        })
        .status(200).json({data : others, token});
        } catch (error) {
           next(error) 
        }
    }
}


const getUser = () => {
    return async (req,res,next) => {
    
        try {
        const userId = req.id;
        const user = await UserService.findUserById(userId);
        if(!user) {
            return res.status(404).json({message: 'User not found'});

        }
         res.status(200).json({user})
    }
    catch (error) {
        next(error);
       } 

    }
}




module.exports = {createAccount, loginAccount, getUser}
